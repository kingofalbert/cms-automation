version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: cms_automation_postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-cms_automation}
      POSTGRES_USER: ${DATABASE_USER:-cms_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-cms_pass}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-cms_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cms_automation_redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cms_automation_backend
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-cms_user}:${DATABASE_PASSWORD:-cms_pass}@postgres:5432/${DATABASE_NAME:-cms_automation}
      REDIS_URL: redis://redis:6379/0
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      CMS_TYPE: ${CMS_TYPE:-wordpress}
      CMS_BASE_URL: ${CMS_BASE_URL}
      CMS_USERNAME: ${CMS_USERNAME}
      CMS_APPLICATION_PASSWORD: ${CMS_APPLICATION_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cms_automation_worker
    command: celery -A src.workers.celery_app worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-cms_user}:${DATABASE_PASSWORD:-cms_pass}@postgres:5432/${DATABASE_NAME:-cms_automation}
      REDIS_URL: redis://redis:6379/0
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      CMS_TYPE: ${CMS_TYPE:-wordpress}
      CMS_BASE_URL: ${CMS_BASE_URL}
      CMS_USERNAME: ${CMS_USERNAME}
      CMS_APPLICATION_PASSWORD: ${CMS_APPLICATION_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cms_automation_beat
    command: celery -A src.workers.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-cms_user}:${DATABASE_PASSWORD:-cms_pass}@postgres:5432/${DATABASE_NAME:-cms_automation}
      REDIS_URL: redis://redis:6379/0
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
    depends_on:
      - redis
    restart: unless-stopped

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cms_automation_flower
    command: celery -A src.workers.celery_app flower --port=5555
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-cms_user}:${DATABASE_PASSWORD:-cms_pass}@postgres:5432/${DATABASE_NAME:-cms_automation}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    volumes:
      - ./backend:/app
    depends_on:
      - redis
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: cms_automation_frontend
    command: npm run dev
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_venv:
    driver: local

networks:
  default:
    name: cms_automation_network
