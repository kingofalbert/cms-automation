openapi: 3.0.3
info:
  title: CMS Automation API
  description: |
    API for AI-powered content management system automation with fusion architecture.

    **Fusion Architecture**: Supports dual-source article workflows:
    - **AI Generation**: Automated article generation from topics using Claude AI
    - **External Import**: Import existing articles from CSV, JSON, or manual entry

    Both sources flow through unified pipelines for:
    - Intelligent tagging and categorization
    - SEO optimization and metadata generation
    - Computer Use API browser automation for WordPress publishing
    - Scheduled publishing workflows
    - Review and approval processes

    **Version 2.0 Changes**:
    - Added article import endpoints
    - Added SEO analysis and optimization endpoints
    - Added Computer Use publishing endpoints
    - Extended Article model with `source` and `seo_optimized` fields
    **Version 2.1 Changes**:
    - Added unified proofreading endpoint with deterministic rule merge
    - Added ProofreadingIssue/ProofreadingResponse schemas and Article detail fields
    **Version 2.2 Changes**:
    - Added publishing task progress tracking and retry APIs
    - Added monitoring/analytics endpoints for task insights
    - Added settings management and Google Drive worklist synchronization
  version: 2.2.0
  contact:
    name: CMS Automation Team
  license:
    name: MIT

servers:
  - url: https://api.cms-automation.example.com/v1
    description: Production server
  - url: https://staging-api.cms-automation.example.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Local development

tags:
  - name: Health
    description: Service health and monitoring
  - name: Topics
    description: AI article generation topic requests
  - name: Articles
    description: Article management and operations
  - name: Import
    description: External article import (CSV, JSON, manual)
  - name: SEO
    description: SEO analysis and metadata optimization
  - name: Proofreading
    description: Unified AI proofreading with deterministic guard rails
  - name: Publishing
    description: Computer Use automated publishing to WordPress
  - name: Monitoring
    description: Publishing task monitoring and logs
  - name: Analytics
    description: Provider performance and cost analytics
  - name: Settings
    description: Application configuration management
  - name: Worklist
    description: Google Drive worklist synchronization and triage
  - name: Tags
    description: Tag and categorization management
  - name: Schedules
    description: Publishing schedule operations
  - name: Workflows
    description: Review and approval workflows

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # ============================================================================
  # HEALTH & MONITORING
  # ============================================================================

  /health:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Returns service health status and dependencies
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ============================================================================
  # TOPIC REQUESTS (AI Generation)
  # ============================================================================

  /topics:
    post:
      tags: [Topics]
      summary: Submit article topic request
      description: |
        Submit a new topic for AI article generation. Supports single topics
        or batch submissions. Triggers async article generation workflow.
        Generated articles will have source='ai_generated'.
      operationId: submitTopicRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicRequestCreate'
      responses:
        '202':
          description: Topic request accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicRequestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

    get:
      tags: [Topics]
      summary: List topic requests
      description: Retrieve paginated list of topic requests with filtering
      operationId: listTopicRequests
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: status
          in: query
          description: Filter by request status
          schema:
            type: string
            enum: [pending, processing, completed, failed, cancelled]
        - name: priority
          in: query
          description: Filter by priority
          schema:
            type: string
            enum: [urgent, normal, low]
      responses:
        '200':
          description: Topic requests retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicRequestList'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /topics/{requestId}:
    get:
      tags: [Topics]
      summary: Get topic request details
      description: Retrieve detailed information about a specific topic request
      operationId: getTopicRequest
      parameters:
        - $ref: '#/components/parameters/RequestIdParam'
      responses:
        '200':
          description: Topic request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicRequestDetail'
        '404':
          $ref: '#/components/responses/NotFound'

  /articles/{articleId}/proofread:
    post:
      tags: [Proofreading, SEO]
      summary: Run unified proofreading analysis
      description: |
        Executes ProofreadingAnalysisService for the specified article. The service issues a single
        Claude Messages API call, merges the AI findings with deterministic F-class rule checks,
        and returns a normalized payload containing issues, suggested content, SEO metadata, and
        processing statistics.
      operationId: proofreadArticle
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      responses:
        '200':
          description: Proofreading analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProofreadingResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Proofreading service failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []

    delete:
      tags: [Topics]
      summary: Cancel topic request
      description: Cancel a pending or processing topic request
      operationId: cancelTopicRequest
      parameters:
        - $ref: '#/components/parameters/RequestIdParam'
      responses:
        '204':
          description: Topic request cancelled
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # ARTICLES
  # ============================================================================

  /articles:
    get:
      tags: [Articles]
      summary: List articles
      description: |
        Retrieve paginated list of articles with filtering and search.
        Articles can be from either AI generation (source='ai_generated') or
        external import (source='imported').
      operationId: listArticles
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: status
          in: query
          description: Filter by article status
          schema:
            type: string
            enum: [draft, in-review, scheduled, published, failed]
        - name: source
          in: query
          description: Filter by article source
          schema:
            type: string
            enum: [ai_generated, imported]
        - name: seo_optimized
          in: query
          description: Filter by SEO optimization status
          schema:
            type: boolean
        - name: tags
          in: query
          description: Filter by tag IDs (comma-separated)
          schema:
            type: string
        - name: search
          in: query
          description: Search in title and body
          schema:
            type: string
        - name: author_id
          in: query
          description: Filter by author user ID
          schema:
            type: integer
      responses:
        '200':
          description: Articles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleList'

  /articles/{articleId}:
    get:
      tags: [Articles]
      summary: Get article details
      description: Retrieve complete article with metadata, SEO data, and workflow state
      operationId: getArticle
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      responses:
        '200':
          description: Article details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDetail'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [Articles]
      summary: Update article
      description: |
        Update article content, metadata, or tags. Supports both manual edits
        and AI re-generation requests.
      operationId: updateArticle
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleUpdate'
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

    delete:
      tags: [Articles]
      summary: Delete article
      description: Soft delete article (moves to deleted status)
      operationId: deleteArticle
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      responses:
        '204':
          description: Article deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /articles/{articleId}/regenerate:
    post:
      tags: [Articles]
      summary: Request AI re-generation
      description: |
        Request AI to regenerate article with specific feedback.
        Creates new version while preserving history.
        Only available for articles with source='ai_generated'.
      operationId: regenerateArticle
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegenerationRequest'
      responses:
        '202':
          description: Regeneration request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegenerationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /articles/{articleId}/rollback:
    post:
      tags: [Articles]
      summary: Rollback published article
      description: Rollback published article to draft status (FR-020)
      operationId: rollbackArticle
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      responses:
        '200':
          description: Article rolled back to draft
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /articles/{articleId}/similarity:
    get:
      tags: [Articles]
      summary: Find similar articles
      description: |
        Find articles with similar topics using semantic similarity (FR-018).
        Returns articles with similarity score > 0.85.
        Works for both AI-generated and imported articles.
      operationId: findSimilarArticles
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
        - name: threshold
          in: query
          description: Similarity threshold (0.0-1.0)
          schema:
            type: number
            format: float
            minimum: 0.0
            maximum: 1.0
            default: 0.85
        - name: limit
          in: query
          description: Maximum number of similar articles
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Similar articles found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimilarityResult'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # ARTICLE IMPORT (NEW - Fusion Architecture)
  # ============================================================================

  /articles/import:
    post:
      tags: [Import]
      summary: Import external articles
      description: |
        Import articles from external sources (CSV, JSON, or manual entry).
        Imported articles will have source='imported' and can flow through
        the same SEO optimization and publishing pipelines as AI-generated articles.

        **CSV Format**:
        - Required columns: title, body
        - Optional columns: author, tags (comma-separated), metadata (JSON string),
          featured_image_url, excerpt, publish_date

        **JSON Format**:
        - Array of article objects with same fields as CSV

        **Manual Entry**:
        - Single article object

        **Processing**:
        - HTML sanitization applied to body content
        - Validation of required fields
        - Duplicate detection via semantic similarity
        - Batch processing for CSV/JSON (async for >10 articles)

        **Success Criteria**: Import 100 articles from CSV in < 5 minutes
      operationId: importArticles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV or JSON file
                skip_duplicates:
                  type: boolean
                  default: true
                similarity_threshold:
                  type: number
                  format: float
                  minimum: 0.0
                  maximum: 1.0
                  default: 0.85
      responses:
        '201':
          description: Import completed (for small batches <10 articles)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
        '202':
          description: Import accepted for async processing (for batches ≥10 articles)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAsyncResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Payload too large (max 1000 articles per batch)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /articles/import/{importId}:
    get:
      tags: [Import]
      summary: Get import status
      description: |
        Check status of async article import operation.
        Returns progress, validation errors, and imported article IDs.
      operationId: getImportStatus
      parameters:
        - name: importId
          in: path
          required: true
          description: Import operation ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Import status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportStatusResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # SEO OPTIMIZATION (NEW - Fusion Architecture)
  # ============================================================================

  /seo/analyze/{articleId}:
    post:
      tags: [SEO]
      summary: Trigger SEO analysis
      description: |
        Analyze article content to generate SEO metadata including:
        - SEO title (50-60 characters)
        - Meta description (150-160 characters)
        - Focus keyword
        - Primary keywords (3-5)
        - Secondary keywords (5-10)
        - Keyword density analysis
        - Readability score
        - Optimization recommendations

        Works for both AI-generated and imported articles.
        Sets article.seo_optimized = TRUE upon completion.

        **Success Criteria**: Analysis completes in < 30 seconds for 1500-word article
      operationId: analyzeSEO
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                focus_keyword_hint:
                  type: string
                  description: Optional keyword hint to guide analysis
                  example: "OAuth2 authentication"
      responses:
        '200':
          description: SEO analysis completed (synchronous for articles <2000 words)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SEOMetadata'
        '202':
          description: SEO analysis queued (async for articles ≥2000 words)
          content:
            application/json:
              schema:
                type: object
                properties:
                  analysis_id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [queued, processing]
                  estimated_completion:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /seo/metadata/{articleId}:
    get:
      tags: [SEO]
      summary: Get SEO metadata
      description: |
        Retrieve SEO metadata for an article. Returns 404 if SEO analysis
        has not been performed yet.
      operationId: getSEOMetadata
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      responses:
        '200':
          description: SEO metadata retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SEOMetadata'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [SEO]
      summary: Update SEO metadata
      description: |
        Update SEO metadata with manual overrides. Original AI-generated values
        are preserved, and manual changes are tracked with timestamps in
        the manual_overrides JSONB field.
      operationId: updateSEOMetadata
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SEOMetadataUpdate'
      responses:
        '200':
          description: SEO metadata updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SEOMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /seo/batch-analyze:
    post:
      tags: [SEO]
      summary: Batch SEO analysis
      description: |
        Trigger SEO analysis for multiple articles in a single request.
        Useful for bulk processing imported articles.

        Returns async task ID for tracking progress.
      operationId: batchAnalyzeSEO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - article_ids
              properties:
                article_ids:
                  type: array
                  items:
                    type: integer
                  minItems: 1
                  maxItems: 100
                  description: Article IDs to analyze (max 100)
      responses:
        '202':
          description: Batch analysis queued
          content:
            application/json:
              schema:
                type: object
                properties:
                  batch_id:
                    type: string
                    format: uuid
                  total_articles:
                    type: integer
                  estimated_completion:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'

  # ============================================================================
  # COMPUTER USE PUBLISHING (NEW - Fusion Architecture)
  # ============================================================================

  /publish/submit/{articleId}:
    post:
      tags: [Publishing]
      summary: Submit article for publishing
      description: |
        Submit article for automated publishing using the configured provider
        (Playwright, Computer Use, or Hybrid orchestrator).

        **Prerequisites**:
        - Article must have SEO metadata (seo_optimized = TRUE)
        - Article status must be 'approved' or 'scheduled'

        **Publishing Workflow**:
        1. Login to WordPress admin
        2. Create new post
        3. Fill title and body content
        4. Upload featured image (if present)
        5. Populate SEO plugin fields (Yoast SEO or Rank Math)
        6. Set categories and tags
        7. Publish article
        8. Verify article is live

      operationId: submitPublishTask
      parameters:
        - name: articleId
          in: path
          required: true
          description: Article ID to publish
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishRequest'
      responses:
        '202':
          description: Publishing task accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishTaskResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Article not ready for publishing (missing SEO metadata or not approved)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publish/tasks/{taskId}/status:
    get:
      tags: [Publishing]
      summary: Get publishing task status
      description: |
        Retrieve detailed status of a publishing task including:
        - Current status (pending, initializing, publishing, completed, failed)
        - Progress through workflow steps
        - Screenshot URLs
        - Execution logs
        - Published article URL (if completed)
        - Error details (if failed)
      operationId: getPublishTaskStatus
      parameters:
        - name: taskId
          in: path
          required: true
          description: Publishing task ID
          schema:
            type: string
      responses:
        '200':
          description: Publishing task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishTask'
        '404':
          $ref: '#/components/responses/NotFound'

  /publish/tasks/{taskId}/retry:
    post:
      tags: [Publishing]
      summary: Retry failed publishing task
      description: |
        Retry a failed publishing task. Increments retry_count.
        Maximum retries configured per task (default: 3).
      operationId: retryPublishTask
      parameters:
        - name: taskId
          in: path
          required: true
          description: Publishing task ID
          schema:
            type: integer
      responses:
        '202':
          description: Retry task queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishTaskResponse'
        '400':
          description: Cannot retry (max retries exceeded or task not failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /publish/tasks:
    get:
      tags: [Publishing]
      summary: List publishing tasks
      description: Retrieve paginated list of publishing tasks with filtering
      operationId: listPublishTasks
      parameters:
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: offset
          in: query
          description: Number of records to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by task status
          schema:
            type: string
            enum:
              - idle
              - pending
              - initializing
              - logging_in
              - creating_post
              - uploading_images
              - configuring_seo
              - publishing
              - completed
              - failed
        - name: provider
          in: query
          description: Filter by publishing provider
          schema:
            type: string
            enum: [playwright, computer_use, hybrid]
        - name: article_id
          in: query
          description: Filter by article ID
          schema:
            type: integer
      responses:
        '200':
          description: Publishing tasks retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishTaskList'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # TASK MONITORING
  # ============================================================================

  /monitoring/tasks:
    get:
      tags: [Monitoring]
      summary: List publishing tasks with monitoring filters
      description: Retrieve publishing tasks with provider/status filters for dashboards
      operationId: monitoringListTasks
      parameters:
        - name: status
          in: query
          schema:
            type: string
            nullable: true
          description: Optional status filter (completed, failed, in_progress, etc.)
        - name: provider
          in: query
          schema:
            type: string
            nullable: true
            enum: [playwright, computer_use, hybrid]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Monitoring tasks retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishTaskList'

  /monitoring/statistics:
    get:
      tags: [Monitoring]
      summary: Get publishing task statistics
      description: Return aggregate counts for completed, failed, and in-progress tasks
      operationId: monitoringStats
      parameters:
        - name: provider
          in: query
          schema:
            type: string
            nullable: true
            enum: [playwright, computer_use, hybrid]
          description: Optional provider filter
      responses:
        '200':
          description: Monitoring statistics summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatistics'

  /monitoring/tasks/{taskId}/logs:
    get:
      tags: [Monitoring]
      summary: Get execution logs for a publishing task
      description: Retrieve chronological execution logs with action metadata
      operationId: monitoringTaskLogs
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: Publishing task identifier (database ID or Celery task ID)
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Execution logs retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionLogList'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # ANALYTICS
  # ============================================================================

  /analytics/provider-comparison:
    get:
      tags: [Analytics]
      summary: Compare provider performance
      description: Return aggregate metrics per provider for the selected time range
      operationId: analyticsProviderComparison
      parameters:
        - name: time_range
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, all]
            default: 30d
          description: Time window for aggregation
      responses:
        '200':
          description: Provider comparison metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderMetric'

  /analytics/cost-usage:
    get:
      tags: [Analytics]
      summary: Get publishing cost usage by day
      description: Aggregate daily cost usage data for the selected time range
      operationId: analyticsCostUsage
      parameters:
        - name: time_range
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, all]
            default: 30d
      responses:
        '200':
          description: Daily cost usage data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CostUsageEntry'

  /analytics/storage-usage:
    get:
      tags: [Analytics]
      summary: Get storage consumption metrics
      description: Summarize Google Drive storage usage by file type
      operationId: analyticsStorageUsage
      responses:
        '200':
          description: Storage usage details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageUsageEntry'

  /analytics/recommendations:
    get:
      tags: [Analytics]
      summary: Get provider optimization recommendations
      description: Generate heuristic recommendations based on provider performance
      operationId: analyticsRecommendations
      parameters:
        - name: time_range
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, all]
            default: 30d
      responses:
        '200':
          description: Analytics recommendations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsResponse'

  # ============================================================================
  # SETTINGS MANAGEMENT
  # ============================================================================

  /settings:
    get:
      tags: [Settings]
      summary: Get application settings
      description: Retrieve current application configuration (singleton record)
      operationId: getSettings
      responses:
        '200':
          description: Settings payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'

    put:
      tags: [Settings]
      summary: Update application settings
      description: Apply partial updates to provider, CMS, and cost configurations
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsUpdateRequest'
      responses:
        '200':
          description: Updated settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'

  /settings/test-connection:
    post:
      tags: [Settings]
      summary: Test CMS connection
      description: Validate credentials for the configured CMS provider
      operationId: testConnection
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionTestRequest'
      responses:
        '200':
          description: Connection test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionTestResponse'

  # ============================================================================
  # WORKLIST (GOOGLE DRIVE)
  # ============================================================================

  /worklist:
    get:
      tags: [Worklist]
      summary: List worklist items
      description: Retrieve paginated worklist documents with optional status filter
      operationId: listWorklistItems
      parameters:
        - name: status
          in: query
          schema:
            type: string
            nullable: true
            enum:
              - to_evaluate
              - to_confirm
              - to_review
              - to_revise
              - to_rereview
              - ready_to_publish
              - published
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Worklist items retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItemList'

  /worklist/statistics:
    get:
      tags: [Worklist]
      summary: Get worklist statistics
      description: Return counts per worklist status
      operationId: getWorklistStatistics
      responses:
        '200':
          description: Worklist statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistStatisticsResponse'

  /worklist/sync-status:
    get:
      tags: [Worklist]
      summary: Get worklist sync status
      description: Provides metadata about the latest Google Drive sync
      operationId: getWorklistSyncStatus
      responses:
        '200':
          description: Sync status payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistSyncStatusResponse'

  /worklist/sync:
    post:
      tags: [Worklist]
      summary: Trigger Google Drive sync
      description: Initiate synchronization with Google Drive worklist folder
      operationId: triggerWorklistSync
      responses:
        '200':
          description: Sync initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistSyncTriggerResponse'

  /worklist/{itemId}/status:
    post:
      tags: [Worklist]
      summary: Update worklist item status
      description: Change worklist status and optionally append reviewer note
      operationId: updateWorklistStatus
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorklistStatusUpdateRequest'
      responses:
        '200':
          description: Updated worklist item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItemResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /worklist/{itemId}/publish:
    post:
      tags: [Worklist]
      summary: Initiate publishing from worklist
      description: Shortcut to mark worklist item ready for publishing workflow
      operationId: publishWorklistItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Worklist item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItemResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # TAGS
  # ============================================================================

  /tags:
    get:
      tags: [Tags]
      summary: List tags
      description: Retrieve all tags with usage statistics
      operationId: listTags
      parameters:
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: min_usage
          in: query
          description: Minimum usage count
          schema:
            type: integer
            minimum: 0
        - name: source
          in: query
          description: Filter by creation source
          schema:
            type: string
            enum: [automated, manual]
      responses:
        '200':
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'

    post:
      tags: [Tags]
      summary: Create tag
      description: Manually create a new tag
      operationId: createTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  # ============================================================================
  # SCHEDULES
  # ============================================================================

  /schedules:
    post:
      tags: [Schedules]
      summary: Schedule article publication
      description: |
        Schedule an article for future publication (FR-007, FR-008).
        Validates article is in publishable state.
      operationId: createSchedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreate'
      responses:
        '201':
          description: Schedule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

    get:
      tags: [Schedules]
      summary: List schedules
      description: Retrieve paginated list of publication schedules
      operationId: listSchedules
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: status
          in: query
          description: Filter by schedule status
          schema:
            type: string
            enum: [pending, published, failed, cancelled]
        - name: from_date
          in: query
          description: Filter schedules from this date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to_date
          in: query
          description: Filter schedules until this date (ISO 8601)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Schedules retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleList'

  /schedules/{scheduleId}:
    get:
      tags: [Schedules]
      summary: Get schedule details
      description: Retrieve detailed schedule information
      operationId: getSchedule
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      responses:
        '200':
          description: Schedule details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [Schedules]
      summary: Update schedule
      description: Modify scheduled publication time or retry configuration
      operationId: updateSchedule
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleUpdate'
      responses:
        '200':
          description: Schedule updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Schedules]
      summary: Cancel schedule
      description: Cancel pending publication schedule
      operationId: cancelSchedule
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      responses:
        '204':
          description: Schedule cancelled
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # WORKFLOWS
  # ============================================================================

  /workflows/{articleId}:
    get:
      tags: [Workflows]
      summary: Get workflow state
      description: Retrieve current workflow and approval state for article
      operationId: getWorkflowState
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      responses:
        '200':
          description: Workflow state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowState'
        '404':
          $ref: '#/components/responses/NotFound'

  /workflows/{articleId}/approve:
    post:
      tags: [Workflows]
      summary: Approve article
      description: Approve article for publication (FR-010)
      operationId: approveArticle
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalRequest'
      responses:
        '200':
          description: Article approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /workflows/{articleId}/reject:
    post:
      tags: [Workflows]
      summary: Reject article
      description: Reject article and optionally request modifications
      operationId: rejectArticle
      parameters:
        - $ref: '#/components/parameters/ArticleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectionRequest'
      responses:
        '200':
          description: Article rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

# ==============================================================================
# COMPONENTS
# ==============================================================================

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from CMS authentication system

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number (1-indexed)
      schema:
        type: integer
        minimum: 1
        default: 1

    PageSizeParam:
      name: page_size
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    ArticleIdParam:
      name: articleId
      in: path
      required: true
      description: Article unique identifier
      schema:
        type: integer

    RequestIdParam:
      name: requestId
      in: path
      required: true
      description: Topic request unique identifier
      schema:
        type: integer

    ScheduleIdParam:
      name: scheduleId
      in: path
      required: true
      description: Schedule unique identifier
      schema:
        type: integer

  schemas:
    # ========================================================================
    # TOPIC REQUESTS (AI Generation)
    # ========================================================================
    # PROOFREADING (AI + Deterministic Guard Rails)
    # ========================================================================

    TopicRequestCreate:
      type: object
      required:
        - topic_description
      properties:
        topic_description:
          type: string
          minLength: 10
          maxLength: 5000
          description: Topic description or outline
          example: "Write a comprehensive guide on implementing OAuth2 authentication in Python web applications"
        outline:
          type: string
          nullable: true
          description: Optional structured outline (Markdown or JSON)
          example: |
            # Introduction
            # OAuth2 Fundamentals
            # Implementation Steps
            # Security Best Practices
        style_tone:
          type: string
          enum: [professional, casual, technical, conversational, academic]
          default: professional
          description: Requested writing style
        target_word_count:
          type: integer
          minimum: 100
          maximum: 10000
          default: 1000
          description: Desired article length in words
        priority:
          type: string
          enum: [urgent, normal, low]
          default: normal
          description: Processing priority

    TopicRequestResponse:
      type: object
      properties:
        request_id:
          type: integer
          example: 42
        status:
          type: string
          enum: [pending, processing, completed, failed, cancelled]
          example: "pending"
        estimated_completion:
          type: string
          format: date-time
          description: Estimated completion time (generation < 5 minutes)
          example: "2025-10-25T14:35:00Z"
        message:
          type: string
          example: "Topic request accepted for processing"

    TopicRequestDetail:
      allOf:
        - $ref: '#/components/schemas/TopicRequestCreate'
        - type: object
          properties:
            id:
              type: integer
              example: 42
            status:
              type: string
              enum: [pending, processing, completed, failed, cancelled]
            submitted_by:
              type: integer
              description: User ID who submitted request
            submitted_at:
              type: string
              format: date-time
            article_id:
              type: integer
              nullable: true
              description: Generated article ID (if completed)
            error_message:
              type: string
              nullable: true
              description: Error details if generation failed

    TopicRequestList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TopicRequestDetail'
        total:
          type: integer
          example: 150
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 20
        total_pages:
          type: integer
          example: 8

    # ========================================================================
    # ARTICLES (Extended for Fusion Architecture)
    # ========================================================================

    Article:
      type: object
      properties:
        id:
          type: integer
          example: 123
        title:
          type: string
          minLength: 10
          maxLength: 500
          example: "Implementing OAuth2 Authentication in Python"
        body:
          type: string
          description: Article content (Markdown or HTML)
        source:
          type: string
          enum: [ai_generated, imported]
          description: Article source (NEW in v2.0)
        seo_optimized:
          type: boolean
          description: Whether SEO analysis has been performed (NEW in v2.0)
        status:
          type: string
          enum: [draft, in-review, scheduled, published, failed]
        author_id:
          type: integer
        created_at:
          type: string
          format: date-time
        published_at:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          description: CMS-specific metadata
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    ArticleDetail:
      allOf:
        - $ref: '#/components/schemas/Article'
        - type: object
          properties:
            seo_metadata:
              $ref: '#/components/schemas/SEOMetadata'
              nullable: true
              description: SEO metadata (if seo_optimized=true)
            publish_task:
              $ref: '#/components/schemas/PublishTask'
              nullable: true
              description: Active or latest publishing task
            workflow_state:
              $ref: '#/components/schemas/WorkflowState'
            schedule:
              $ref: '#/components/schemas/Schedule'
              nullable: true
            version:
              type: integer
              description: Article version number
            proofreading_issues:
              type: array
              description: Proofreading issues returned by AI + deterministic checks
              items:
                $ref: '#/components/schemas/ProofreadingIssue'
            critical_issues_count:
              type: integer
              description: Number of blocking issues detected during latest proofreading
            modification_history:
              type: array
              items:
                type: object
                properties:
                  version:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time
                  change_type:
                    type: string
                    enum: [manual_edit, ai_regeneration, imported]
                  user_id:
                    type: integer

    ArticleList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
        total_pages:
          type: integer

    ArticleUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 500
        body:
          type: string
        metadata:
          type: object
          additionalProperties: true
        tag_ids:
          type: array
          items:
            type: integer
          description: Replace existing tags

    RegenerationRequest:
      type: object
      required:
        - feedback
      properties:
        feedback:
          type: string
          minLength: 10
          maxLength: 2000
          description: Specific guidance for AI re-generation
          example: "Add more code examples in the authentication flow section. Expand the security best practices section with at least 5 recommendations."
        preserve_sections:
          type: array
          items:
            type: string
          description: Section headings to preserve from current version
          example: ["Introduction", "Conclusion"]

    RegenerationResponse:
      type: object
      properties:
        regeneration_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, processing]
        estimated_completion:
          type: string
          format: date-time

    # ========================================================================
    # ARTICLE IMPORT (NEW - Fusion Architecture)
    # ========================================================================

    ImportRequest:
      type: object
      required:
        - articles
      properties:
        articles:
          type: array
          items:
            type: object
            required:
              - title
              - body
            properties:
              title:
                type: string
                minLength: 10
                maxLength: 500
              body:
                type: string
                description: Article content (HTML or Markdown)
              author:
                type: string
                nullable: true
              tags:
                type: array
                items:
                  type: string
                description: Tag names (will be created if not exist)
              metadata:
                type: object
                additionalProperties: true
              featured_image_url:
                type: string
                format: uri
                nullable: true
              excerpt:
                type: string
                nullable: true
              publish_date:
                type: string
                format: date-time
                nullable: true
          minItems: 1
          maxItems: 1000
          description: Articles to import (max 1000 per batch)
        skip_duplicates:
          type: boolean
          default: true
          description: Skip articles with similarity > threshold
        similarity_threshold:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          default: 0.85
          description: Similarity threshold for duplicate detection

    ImportResponse:
      type: object
      properties:
        imported_count:
          type: integer
          description: Number of articles successfully imported
        skipped_count:
          type: integer
          description: Number of articles skipped (duplicates)
        failed_count:
          type: integer
          description: Number of articles that failed validation
        article_ids:
          type: array
          items:
            type: integer
          description: IDs of imported articles
        validation_errors:
          type: array
          items:
            type: object
            properties:
              row_index:
                type: integer
              title:
                type: string
              errors:
                type: array
                items:
                  type: string
        duplicates:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              similar_to_article_id:
                type: integer
              similarity_score:
                type: number
                format: float
        duration_seconds:
          type: number
          format: float

    ImportAsyncResponse:
      type: object
      properties:
        import_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, processing]
        total_articles:
          type: integer
        estimated_completion:
          type: string
          format: date-time

    ImportStatusResponse:
      type: object
      properties:
        import_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, processing, completed, failed]
        progress:
          type: object
          properties:
            total:
              type: integer
            processed:
              type: integer
            imported:
              type: integer
            skipped:
              type: integer
            failed:
              type: integer
        result:
          $ref: '#/components/schemas/ImportResponse'
          nullable: true
          description: Final import result (if completed)
        error_message:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
          nullable: true

    # ========================================================================
    # SEO OPTIMIZATION (NEW - Fusion Architecture)
    # ========================================================================

    SEOMetadata:
      type: object
      properties:
        id:
          type: integer
        article_id:
          type: integer
        article_title:
          type: string
          description: Associated article title
        seo_title:
          type: string
          minLength: 50
          maxLength: 60
          description: SEO-optimized title (50-60 chars)
          example: "OAuth2 Authentication in Python: Complete Guide 2025"
        meta_description:
          type: string
          minLength: 150
          maxLength: 160
          description: SEO meta description (150-160 chars)
          example: "Learn OAuth2 authentication in Python with code examples, best practices, and security tips. Complete guide for developers building secure web applications."
        focus_keyword:
          type: string
          description: Primary focus keyword
          example: "OAuth2 authentication Python"
        primary_keywords:
          type: array
          items:
            type: string
          minItems: 3
          maxItems: 5
          description: Primary keywords (3-5)
          example: ["OAuth2", "Python authentication", "web security"]
        secondary_keywords:
          type: array
          items:
            type: string
          minItems: 5
          maxItems: 10
          description: Secondary keywords (5-10)
          example: ["access tokens", "authorization flow", "API security", "token refresh", "JWT"]
        keyword_density:
          type: object
          additionalProperties: true
          description: Keyword density analysis (JSONB)
          example:
            "OAuth2": 2.3
            "authentication": 1.8
            "Python": 1.5
        optimization_recommendations:
          type: array
          items:
            type: string
          description: SEO improvement recommendations
          example:
            - "Increase focus keyword density to 2-3%"
            - "Add more internal links to related articles"
            - "Include multimedia content (images, diagrams)"
        readability_score:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Flesch reading ease score
          example: 65.3
        manual_overrides:
          type: object
          additionalProperties: true
          description: User manual edits with timestamps (JSONB)
          example:
            seo_title:
              original: "OAuth2 Authentication in Python: Complete Guide 2025"
              override: "Master OAuth2 Authentication in Python [2025]"
              timestamp: "2025-10-25T15:30:00Z"
        generated_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SEOMetadataUpdate:
      type: object
      properties:
        seo_title:
          type: string
          minLength: 50
          maxLength: 60
        meta_description:
          type: string
          minLength: 150
          maxLength: 160
        focus_keyword:
          type: string
        primary_keywords:
          type: array
          items:
            type: string
          minItems: 3
          maxItems: 5
        secondary_keywords:
          type: array
          items:
            type: string
          minItems: 5
          maxItems: 10

    # ========================================================================
    # PROOFREADING (AI + DETERMINISTIC)
    # ========================================================================

    ProofreadingIssue:
      type: object
      required: [rule_id, category, message, severity, confidence, can_auto_fix, blocks_publish, source]
      properties:
        rule_id:
          type: string
          description: Rule identifier (e.g. A1-001)
        category:
          type: string
          description: Rule category (A-F)
        subcategory:
          type: string
          nullable: true
          description: Subcategory (e.g. A1, F2)
        message:
          type: string
          description: Human readable explanation of the issue
        suggestion:
          type: string
          nullable: true
          description: Optional fix recommendation
        severity:
          type: string
          enum: [info, warning, error, critical]
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
        can_auto_fix:
          type: boolean
        blocks_publish:
          type: boolean
        source:
          type: string
          enum: [ai, script, merged]
          description: Origin of the issue
        attributed_by:
          type: string
          nullable: true
          description: Component identifiers that produced the issue
        location:
          type: object
          nullable: true
          additionalProperties: true
          description: Pointer to affected content (paragraph index, offsets, etc.)
        evidence:
          type: string
          nullable: true
          description: Supporting excerpt or metadata

    ProofreadingStatistics:
      type: object
      properties:
        total_issues:
          type: integer
        ai_issue_count:
          type: integer
        script_issue_count:
          type: integer
        blocking_issue_count:
          type: integer
        categories:
          type: object
          additionalProperties:
            type: integer
        source_breakdown:
          type: object
          additionalProperties:
            type: integer

    ProcessingMetadata:
      type: object
      properties:
        ai_model:
          type: string
          nullable: true
        ai_latency_ms:
          type: integer
          nullable: true
        prompt_tokens:
          type: integer
          nullable: true
        completion_tokens:
          type: integer
          nullable: true
        total_tokens:
          type: integer
          nullable: true
        prompt_hash:
          type: string
          nullable: true
        rule_manifest_version:
          type: string
          nullable: true
        script_engine_version:
          type: string
          nullable: true
        notes:
          type: object
          additionalProperties: true
          description: Miscellaneous debugging or analytics metadata

    ProofreadingResponse:
      type: object
      properties:
        article_id:
          type: integer
          nullable: true
        issues:
          type: array
          items:
            $ref: '#/components/schemas/ProofreadingIssue'
        statistics:
          $ref: '#/components/schemas/ProofreadingStatistics'
        suggested_content:
          type: string
          nullable: true
        seo_metadata:
          type: object
          nullable: true
          additionalProperties: true
        processing_metadata:
          $ref: '#/components/schemas/ProcessingMetadata'

    # ========================================================================
    # COMPUTER USE PUBLISHING (NEW - Fusion Architecture)
    # ========================================================================

    PublishRequest:
      type: object
      required:
        - provider
        - options
      properties:
        provider:
          type: string
          enum: [playwright, computer_use, hybrid]
          description: Publishing provider to use
        options:
          type: object
          additionalProperties: true
          description: Provider options (SEO, scheduling, categories)

    PublishTaskResponse:
      type: object
      properties:
        task_id:
          type: string
          description: Celery task ID
        status:
          type: string
          description: Initial task status
        message:
          type: string
          example: "Publishing task submitted successfully."

    PublishTask:
      type: object
      properties:
        id:
          type: integer
        article_id:
          type: integer
        article_title:
          type: string
          description: Associated article title
        provider:
          type: string
          enum: [playwright, computer_use, hybrid]
        status:
          type: string
          enum:
            - idle
            - pending
            - initializing
            - logging_in
            - creating_post
            - uploading_images
            - configuring_seo
            - publishing
            - completed
            - failed
        progress:
          type: integer
          minimum: 0
          maximum: 100
        current_step:
          type: string
        total_steps:
          type: integer
        completed_steps:
          type: integer
        published_url:
          type: string
          format: uri
          nullable: true
          description: Published article URL (if completed)
        screenshots:
          type: array
          items:
            type: object
            properties:
              step:
                type: string
                description: Workflow step name
                example: "login_success"
              url:
                type: string
                format: uri
                description: Screenshot URL (pre-signed S3 or local path)
              timestamp:
                type: string
                format: date-time
          description: Screenshots captured during workflow
        retry_count:
          type: integer
          description: Number of retry attempts
        max_retries:
          type: integer
        error_message:
          type: string
          nullable: true
          description: Error details (if failed)
        created_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        duration:
          type: integer
          nullable: true
          description: Total execution time
        cost:
          type: number
          format: float
          nullable: true

    PublishTaskList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PublishTask'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    TaskStatistics:
      type: object
      properties:
        total:
          type: integer
        completed:
          type: integer
        failed:
          type: integer
        in_progress:
          type: integer

    ExecutionLogEntry:
      type: object
      properties:
        id:
          type: integer
        task_id:
          type: integer
        created_at:
          type: string
          format: date-time
        log_level:
          type: string
        step_name:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        action_type:
          type: string
          nullable: true
        action_target:
          type: string
          nullable: true
        action_result:
          type: string
          nullable: true
        screenshot_url:
          type: string
          format: uri
          nullable: true
        details:
          type: object
          nullable: true
          additionalProperties: true

    ExecutionLogList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionLogEntry'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    ProviderMetric:
      type: object
      properties:
        provider:
          type: string
          enum: [playwright, computer_use, hybrid]
        total_tasks:
          type: integer
        completed_tasks:
          type: integer
        failed_tasks:
          type: integer
        in_progress_tasks:
          type: integer
        success_rate:
          type: number
          format: float
        avg_duration_seconds:
          type: number
          format: float
          nullable: true
        avg_cost_usd:
          type: number
          format: float
          nullable: true
        total_cost_usd:
          type: number
          format: float

    CostUsageEntry:
      type: object
      properties:
        date:
          type: string
          format: date
          nullable: true
        total_cost_usd:
          type: number
          format: float
        avg_cost_usd:
          type: number
          format: float

    StorageUsageEntry:
      type: object
      properties:
        file_type:
          type: string
        file_count:
          type: integer
        total_bytes:
          type: integer
        total_megabytes:
          type: number
          format: float

    RecommendationsResponse:
      type: object
      properties:
        summary:
          type: string
        recommendations:
          type: array
          items:
            type: string
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/ProviderMetric'

    SettingsResponse:
      type: object
      properties:
        provider_config:
          type: object
          additionalProperties: true
        cms_config:
          type: object
          additionalProperties: true
        cost_limits:
          type: object
          additionalProperties: true
        screenshot_retention:
          type: object
          additionalProperties: true
        updated_at:
          type: string
          format: date-time

    SettingsUpdateRequest:
      type: object
      properties:
        provider_config:
          type: object
          additionalProperties: true
        cms_config:
          type: object
          additionalProperties: true
        cost_limits:
          type: object
          additionalProperties: true
        screenshot_retention:
          type: object
          additionalProperties: true

    ConnectionTestRequest:
      type: object
      properties:
        cms_type:
          type: string
          nullable: true
        base_url:
          type: string
          format: uri
          nullable: true
        username:
          type: string
          nullable: true
        application_password:
          type: string
          nullable: true
        api_token:
          type: string
          nullable: true

    ConnectionTestResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        details:
          type: object
          nullable: true
          additionalProperties: true

    WorklistItemResponse:
      type: object
      properties:
        id:
          type: integer
        drive_file_id:
          type: string
        title:
          type: string
        status:
          type: string
          enum:
            - to_evaluate
            - to_confirm
            - to_review
            - to_revise
            - to_rereview
            - ready_to_publish
            - published
        author:
          type: string
          nullable: true
        article_id:
          type: integer
          nullable: true
        metadata:
          type: object
          additionalProperties: true
        notes:
          type: array
          items:
            type: object
            additionalProperties: true
        synced_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    WorklistItemList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorklistItemResponse'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    WorklistStatisticsResponse:
      type: object
      properties:
        total:
          type: integer
        breakdown:
          type: object
          additionalProperties:
            type: integer

    WorklistSyncStatusResponse:
      type: object
      properties:
        last_synced_at:
          type: string
          format: date-time
          nullable: true
        total_items:
          type: integer

    WorklistSyncTriggerResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        queued_at:
          type: string
          format: date-time
        summary:
          type: object
          nullable: true
          additionalProperties: true
        error:
          type: string
          nullable: true

    WorklistStatusUpdateRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - to_evaluate
            - to_confirm
            - to_review
            - to_revise
            - to_rereview
            - ready_to_publish
            - published
        note:
          type: object
          nullable: true
          additionalProperties: true

    ScreenshotsResponse:
      type: object
      properties:
        task_id:
          type: integer
        article_id:
          type: integer
        screenshots:
          type: array
          items:
            type: object
            properties:
              step:
                type: string
                enum:
                  - login_success
                  - editor_loaded
                  - content_filled
                  - image_uploaded
                  - seo_fields_filled
                  - taxonomy_set
                  - publish_clicked
                  - article_live
              url:
                type: string
                format: uri
                description: Pre-signed download URL (expires in 1 hour)
              timestamp:
                type: string
                format: date-time
              file_size_bytes:
                type: integer
        total_screenshots:
          type: integer

    # ========================================================================
    # TAGS
    # ========================================================================

    Tag:
      type: object
      properties:
        id:
          type: integer
          example: 7
        name:
          type: string
          example: "OAuth2"
        slug:
          type: string
          example: "oauth2"
        category:
          type: string
          nullable: true
          example: "Authentication"
        usage_count:
          type: integer
          example: 42
        source:
          type: string
          enum: [automated, manual]
        cms_tag_id:
          type: string
          nullable: true

    TagCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        category:
          type: string
          nullable: true

    TagList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        total:
          type: integer

    # ========================================================================
    # SCHEDULES
    # ========================================================================

    Schedule:
      type: object
      properties:
        id:
          type: integer
        article_id:
          type: integer
        scheduled_time:
          type: string
          format: date-time
          description: Target publication time (UTC)
        creator_id:
          type: integer
        status:
          type: string
          enum: [pending, published, failed, cancelled]
        retry_count:
          type: integer
        max_retries:
          type: integer
          default: 3
        created_at:
          type: string
          format: date-time
        executed_at:
          type: string
          format: date-time
          nullable: true
        error_message:
          type: string
          nullable: true

    ScheduleCreate:
      type: object
      required:
        - article_id
        - scheduled_time
      properties:
        article_id:
          type: integer
        scheduled_time:
          type: string
          format: date-time
          description: Must be future time (FR-008)
        max_retries:
          type: integer
          minimum: 0
          maximum: 5
          default: 3

    ScheduleUpdate:
      type: object
      properties:
        scheduled_time:
          type: string
          format: date-time
        max_retries:
          type: integer
          minimum: 0
          maximum: 5

    ScheduleList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
        total_pages:
          type: integer

    # ========================================================================
    # WORKFLOWS
    # ========================================================================

    WorkflowState:
      type: object
      properties:
        id:
          type: integer
        article_id:
          type: integer
        current_status:
          type: string
          enum: [pending_review, approved, rejected, revision_requested]
        assigned_reviewers:
          type: array
          items:
            type: integer
          description: User IDs of assigned reviewers
        approval_history:
          type: array
          items:
            type: object
            properties:
              reviewer_id:
                type: integer
              action:
                type: string
                enum: [approved, rejected]
              comment:
                type: string
              timestamp:
                type: string
                format: date-time
        modification_requests:
          type: array
          items:
            type: object
            properties:
              requester_id:
                type: integer
              request_type:
                type: string
                enum: [ai_regeneration, manual_edit]
              feedback:
                type: string
              status:
                type: string
                enum: [pending, completed, cancelled]
              created_at:
                type: string
                format: date-time
        version:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ApprovalRequest:
      type: object
      properties:
        comment:
          type: string
          maxLength: 1000
          description: Optional approval comment

    RejectionRequest:
      type: object
      required:
        - comment
      properties:
        comment:
          type: string
          minLength: 10
          maxLength: 2000
          description: Rejection reason (required)
        request_modification:
          type: boolean
          default: false
          description: Whether to request article modification
        modification_type:
          type: string
          enum: [ai_regeneration, manual_edit]
        modification_feedback:
          type: string
          description: Specific feedback for modification (required if request_modification=true)

    # ========================================================================
    # SIMILARITY
    # ========================================================================

    SimilarityResult:
      type: object
      properties:
        article_id:
          type: integer
        similar_articles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              similarity_score:
                type: number
                format: float
                minimum: 0.0
                maximum: 1.0
                description: Cosine similarity score
              created_at:
                type: string
                format: date-time
        threshold:
          type: number
          format: float

    # ========================================================================
    # COMMON RESPONSES
    # ========================================================================

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "2.0.0"
        dependencies:
          type: object
          properties:
            database:
              type: string
              enum: [healthy, unhealthy]
            redis:
              type: string
              enum: [healthy, unhealthy]
            claude_api:
              type: string
              enum: [healthy, unhealthy]
            cms_api:
              type: string
              enum: [healthy, unhealthy]
        metrics:
          type: object
          properties:
            queue_depth:
              type: integer
            active_workers:
              type: integer
            avg_generation_time:
              type: number
              description: Average article generation time (seconds)

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Invalid request parameters"
            details:
              type: object
              additionalProperties: true
            request_id:
              type: string
              format: uuid

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Resource conflict (e.g., duplicate, version mismatch)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    RateLimited:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Requests remaining in window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when limit resets (Unix timestamp)
