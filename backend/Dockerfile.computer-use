# Dockerfile for Computer Use environment with browser support
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    DISPLAY=:1 \
    VNC_PORT=5901 \
    NOVNC_PORT=6080

WORKDIR /app

# Install system dependencies for Computer Use
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    libpq-dev \
    curl \
    # X11 and VNC server
    xvfb \
    x11vnc \
    fluxbox \
    novnc \
    websockify \
    # Browser dependencies
    chromium \
    chromium-driver \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libatspi2.0-0 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgbm1 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxkbcommon0 \
    libxrandr2 \
    xdg-utils \
    # Utilities
    wget \
    gnupg \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 - \
    && ln -s /root/.local/bin/poetry /usr/local/bin/poetry

# Set Poetry configuration
RUN poetry config virtualenvs.create false

# Copy dependency files
COPY pyproject.toml poetry.lock* ./

# Install Python dependencies
RUN poetry install --no-interaction --no-ansi --no-root

# Copy application code
COPY . .

# Install the project
RUN poetry install --no-interaction --no-ansi

# Create directories for VNC and screenshots
RUN mkdir -p /tmp/.X11-unix /root/.vnc /app/screenshots

# Set VNC password (change this in production!)
RUN x11vnc -storepasswd vnc_password /root/.vnc/passwd

# Create startup script
RUN echo '#!/bin/bash\n\
# Start X virtual framebuffer\n\
Xvfb :1 -screen 0 1920x1080x24 &\n\
\n\
# Wait for X server\n\
sleep 2\n\
\n\
# Start window manager\n\
fluxbox &\n\
\n\
# Start VNC server\n\
x11vnc -display :1 -forever -shared -rfbport 5901 -rfbauth /root/.vnc/passwd &\n\
\n\
# Start noVNC web server\n\
/usr/share/novnc/utils/launch.sh --vnc localhost:5901 --listen 6080 &\n\
\n\
# Keep container running\n\
tail -f /dev/null\n\
' > /start.sh && chmod +x /start.sh

# Expose ports
EXPOSE 8000 5901 6080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["/start.sh"]
